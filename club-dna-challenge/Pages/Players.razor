@page "/players/{TokenHash:int}/{PlayersHash:int}/{Page:int}/{PageSize:int}"
@using System.Net.Http.Headers
@using club_dna_challenge.Models
@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject HttpClient HttpClient

<MudPaper Class="d-flex flex-wrap gap-4">
    @foreach (var (player, index) in _playerData.Players.Select((player, index) => ( player, index )))
    {
        <MudCard>
            <MudCardMedia Image="@player.PhotoUrl" Height="200"></MudCardMedia>
            <MudCardContent>
                <MudText Typo="Typo.h5">@player.Forename @player.Surname</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="((e) => OpenPlayerPageWithPlayerData(index))">View</MudButton>
            </MudCardActions>
            <MudCheckBox Color="Color.Primary" T="bool" bind-Value="@_checked[index]" ValueChanged="() => CheckboxToggle(index)"></MudCheckBox>
        </MudCard>
    }
    <MudSpacer></MudSpacer>
    <MudCheckBox T="bool" Label="Select All" ValueChanged="() => SelectAll()" Style="align-content: center"></MudCheckBox>
    <MudButton Color="Color.Primary" OnClick="@CompareSelected" Style="align-content: center">Compare Selected</MudButton>
    <MudPopover Open="@_popoverToggle" Class="px-4 pt-4">
        <MudText>No players selected</MudText>
        <MudButton OnClick="@PopoverToggle" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
    </MudPopover>
</MudPaper>

<MudPagination Color="Color.Primary" Count="@_playerData.TotalPages" SelectedChanged="Callback"/>
<MudText Align="Align.Center">Selected page: @_selectedPage</MudText>

@code {
    [Parameter]
    public int TokenHash { get; set; }
    [Parameter]
    public int PlayersHash { get; set; }
    [Parameter]
    public int Page { get; set; }
    [Parameter]
    public int PageSize { get; set; }
    
    GetPlayerDataClubDnaResponse _playerData = new();
    GetTokenResponse _token = new();
    List<bool> _checked = new();
    bool _popoverToggle;
    int _selectedPage = 1;

    protected override void OnInitialized()
    {
        _playerData = (GetPlayerDataClubDnaResponse)StateContainer.ObjectTunnel[PlayersHash];
        _token = (GetTokenResponse)StateContainer.ObjectTunnel[TokenHash];
        foreach (var player in _playerData.Players)
        {
            _checked.Add(false);
        }
    }

    void OpenPlayerPageWithPlayerData(int index)
    {
        var data = _playerData.Players[index];
        StateContainer.ObjectTunnel.Add(data.GetHashCode(), data);
        
        NavigationManager.NavigateTo($"player/{data.GetHashCode()}");
    }

    void CompareSelected()
    {
        var players = new List<Models.Player>();
        
        foreach (var (c, i) in _checked.Select((c, i) => (c, i)))
        {
            if (!c) continue;
            players.Add(_playerData.Players[i]);
        }

        if (players.Count == 0)
        {
            _popoverToggle = true;
        }
        else
        {
            StateContainer.ObjectTunnel.Add(players.GetHashCode(), players);
            NavigationManager.NavigateTo($"playerComparison/{players.GetHashCode()}");
        }
    }

    void PopoverToggle()
    {
        _popoverToggle = !_popoverToggle;
    }

    void CheckboxToggle(int index)
    {
        _checked[index] = !_checked[index];
    }

    void SelectAll()
    {
        if (!_checked[0])
        {
            for (int index = 0; index < _checked.Count; index++)
            {
                _checked[index] = true;
            }
        }
        else
        {
            for (int index = 0; index < _checked.Count; index++)
            {
                _checked[index] = false;
            }
        }
        
    }

    async void Callback(int selectedPage)
    {
        _selectedPage = selectedPage;

        HttpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer",_token.Data.Token);
        var response = await HttpClient.GetAsync($"https://api-dev.club-dna.com/api/test/players?page={selectedPage}&pagesize={PageSize}").ConfigureAwait(false);
        var responseContent = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
        _playerData = JsonConvert.DeserializeObject<GetPlayerDataClubDnaResponse>(responseContent);
        
        StateHasChanged();
    }

}